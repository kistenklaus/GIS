import { Paper, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, styled } from "@mui/material";
import { invoke } from "@tauri-apps/api";
import { listen } from "@tauri-apps/api/event";

import React, { useEffect, useState } from "react";
import Frame from "../types/Frame";
import FrameName from "./FrameName";
import FrameId from "./FrameId";
import FrameDescription from "./FrameDescription";
import FrameData from "./FrameData";
import FrameDlc from "./FrameDlc";


function KarlsTraceExample() {

  const [rows, setRows] = useState<Frame[]>([]);

  function handle_event(frame: Frame) {
    setRows((rows) => {
      let index = rows.findIndex((f) => {
        if (f.TypeFrame != undefined && frame.TypeFrame != undefined) {
          return f.TypeFrame.id === frame.TypeFrame.id &&
            f.TypeFrame.ide === frame.TypeFrame.ide;
        } else if (f.SignalFrame != undefined && frame.SignalFrame) {
          return f.SignalFrame.id === frame.SignalFrame.id &&
            f.SignalFrame.ide === frame.SignalFrame.ide;
        } else if (f.UndefinedFrame != undefined && frame.UndefinedFrame != undefined) {
          return f.UndefinedFrame.id === frame.UndefinedFrame.id &&
            f.UndefinedFrame.ide === frame.UndefinedFrame.ide;
        } else if (f.ErrorFrame != undefined && frame.ErrorFrame != undefined) {
          return f.ErrorFrame.data === frame.ErrorFrame.data;
        } else {
          return false;
        }
      });
      if (index == -1) {
        let new_rows = rows.slice();
        new_rows.push(frame);
        return new_rows;
      } else {
        let new_rows = rows.slice();
        new_rows[index] = frame;
        return new_rows;
      }
    });
  }

  useEffect(() => {
    invoke<Frame[]>("listen_to_trace").then((frames) => {
      for (let frame of frames) {
        handle_event(frame);
      }
    });

    let trace_event_listener = listen<Frame[]>("trace", (event) => {
      for (let frame of event.payload) {
        handle_event(frame);
      }
    });
    return () => {
      invoke("unlisten_to_trace")
      trace_event_listener.then((f) => f());
    }
  }, []);


  return (
    <Paper sx={{ width: '100%', overflow: 'hidden' }}>
      <TableContainer sx={{ maxHeight: 800 }}>
        <Table stickyHeader aria-label="sticky table">
          <TableHead>
            <TableRow>
              <TableCell align="left">Name</TableCell>
              <TableCell align="left">Id</TableCell>
              <TableCell align="left">Data</TableCell>
              <TableCell align="left">Dlc</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((frame) => {
              if (frame.TypeFrame) {
                let type_frame = frame.TypeFrame;
                return (
                  <TableRow key={type_frame.name}>
                    <TableCell align="left"><FrameName frame={type_frame} /> </TableCell>
                    <TableCell align="left"><FrameId frame={type_frame}></FrameId></TableCell>
                    <TableCell align="left"><FrameData frame={type_frame}></FrameData></TableCell>
                    <TableCell align="left"><FrameDlc frame={type_frame}></FrameDlc></TableCell>
                  </TableRow>
                );
              }

            })}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
}

export default KarlsTraceExample;
